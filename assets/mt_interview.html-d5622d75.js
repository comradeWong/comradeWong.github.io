import{_ as p,r as o,o as c,c as l,d as n,e as a,f as t,a as e}from"./app-9ed79f46.js";const i={},u=e(`<blockquote><p>1.vue项目中遇到的难题？ 2.说一下组件传参的类型 3.html的存储方式 4.promise的方式？ 5.说一下ES6 6.哈希和history的区别 7.http请求的一些（值？类似404 500的） 8.vuex的几种方法 9.vue-router的两种路由跳转 10.vue生命周期及特点 11.说一下知道的几种数组原生方法 12.跨域以及跨域的解决方法 13.获得对象属性的方法</p></blockquote><hr><h1 id="vue项目中遇到的难题" tabindex="-1"><a class="header-anchor" href="#vue项目中遇到的难题" aria-hidden="true">#</a> vue项目中遇到的难题？</h1><ul><li>使用eventBus传值时，$emit 和$on方法是存在先后顺序的，必须是$on事件监听的绑定要在$emit事件发送之前建立，否则就是能监听到事件，但是传递的值也会丢失。</li><li>js的异步编程的问题。</li><li>Vue中数据更新，但是dom没有被更新的问题（vm.$set()解决）</li><li>watch监听object时，需要进行深度监听，因为vue默认只监听data中的属性一级。</li></ul><h1 id="说一下组件传参的方式" tabindex="-1"><a class="header-anchor" href="#说一下组件传参的方式" aria-hidden="true">#</a> 说一下组件传参的方式</h1><h2 id="_1-vuex" tabindex="-1"><a class="header-anchor" href="#_1-vuex" aria-hidden="true">#</a> 1.Vuex</h2><pre><code>  - 优点
     - 解决了多层组件之间繁琐的事件传播。
     - 解决了多组件依赖统同一状态的问题。
     - 单向数据流
     - 为Vue量身定做，学习成本不高
  - 缺点
     - 不能做数据持久化，刷新页面就要重制，要做数据持久化可以考虑使用localstorage。
     - 增加额外的代码体积，简单的业务场景不建议使用。
</code></pre><h2 id="_2-eventbus" tabindex="-1"><a class="header-anchor" href="#_2-eventbus" aria-hidden="true">#</a> 2.EventBus</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bus.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// component-a.js</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;./bus.js&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;event-name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">preload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// component-b.js</span>
<span class="token keyword">import</span> bus <span class="token keyword">from</span> <span class="token string">&#39;./bus.js&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;event-name&#39;</span><span class="token punctuation">,</span> preload<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  - 优点
     - 解决了多层组件之间繁琐的事件传播。
     - 使用原理十分简单，代码量少。
  - 缺点
     - 由于是都使用一个Vue实例，所以容易出现重复触发的情景，例如：
        1. 多人开发时，A、B两个人定义了同一个事件名。
        1. 两个页面都定义了同一个事件名，并且没有用$off销毁（常出现在路由切换时）。
        1. 在for出来的组件里注册。
     - 项目一大用这种方式管理事件会十分混乱，这时候建议用vuex。
</code></pre><h2 id="_3-props和-emit-on" tabindex="-1"><a class="header-anchor" href="#_3-props和-emit-on" aria-hidden="true">#</a> 3.props和$emit/$on</h2><p>这个我想不用赘述了，这是最基本的组件之间传值的方式。</p><pre><code>  - 优点
     - 使用最为简单，也是父子组件传递最常见的方法。
     - Vue为给props提供了类型检查支持。
     - $emit不会修改到别的组件的同名事件，因为他只能触发父级的事件，这里和event-bus不同
  - 缺点
     - 单一组件层级一深需要逐层传递，会有很多不必要的代码量。
     - 不能解决了多组件依赖统同一状态的问题。
</code></pre>`,13),r={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E7%A6%81%E7%94%A8%E7%89%B9%E6%80%A7%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"},d={href:"https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"_4-provide-inject",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-provide-inject","aria-hidden":"true"},"#"),a(" 4.provide/inject")],-1),m=n("p",null,"在父组件上通过provide提供给后代组件的数据/方法，在后代组件上通过inject来接收被注入的数据/方法。",-1),v=n("h3",{id:"使用方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用方法","aria-hidden":"true"},"#"),a(" 使用方法")],-1),h={href:"https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5",target:"_blank",rel:"noopener noreferrer"},b=e(`<h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><pre><code>  - 优点
     - 不用像props一层层传递，可以跨层级传递。
  - 缺点
     - 用这种方式传递的属性是非响应式的，所以尽可能来传递一些静态属性。
     - 引用官网的话是\`它将你的应用以目前的组件组织方式耦合了起来，使重构变得更加困难。\`，我对这句话的理解是用了provide/inject你就要遵循它的组件组织方式，在项目的重构时如果要破坏这个组织方式会有额外的开发成本，其实event-bus也有这个问题。
</code></pre><h2 id="_5-slot" tabindex="-1"><a class="header-anchor" href="#_5-slot" aria-hidden="true">#</a> 5.slot</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>你可以在组件的html模版里添加自定义内容，这个内容可以是任何代码模版，就像：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigation-link</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/profile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 添加一个 Font Awesome 图标 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fa fa-user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  Your Profile
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigation-link</span><span class="token punctuation">&gt;</span></span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。</p></blockquote><p>你也可以通过<code>slot-scope</code>属性来实现从子组件将一些信息传递给父组件，注意这个属性是vue2.1.0+新增的。</p><h3 id="使用方法-1" tabindex="-1"><a class="header-anchor" href="#使用方法-1" aria-hidden="true">#</a> 使用方法</h3>`,9),g={href:"https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9",target:"_blank",rel:"noopener noreferrer"},f=e(`<h3 id="优缺点-1" tabindex="-1"><a class="header-anchor" href="#优缺点-1" aria-hidden="true">#</a> 优缺点</h3><pre><code>  - 优点
     - 可以在父组件里自定义插入到子组件里的内容，虽然其他属性也可以，但是我觉得slot更倾向于自定义的条件是来自于父容器中。
     - 复用性好,适合做组件开发。
  - 缺点
     - 和props一样不支持跨层级传递。
</code></pre><h2 id="_6-parent-children" tabindex="-1"><a class="header-anchor" href="#_6-parent-children" aria-hidden="true">#</a> 6.$parent/$children</h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h3><p>通过$parent/$children可以拿到父子组件的实例，从而调用实例里的方法，实现父子组件通信。并不推荐这种做法。</p><h3 id="使用方法-2" tabindex="-1"><a class="header-anchor" href="#使用方法-2" aria-hidden="true">#</a> 使用方法</h3>`,6),y=n("code",null,"this.$parent",-1),x=n("code",null,"this.$children",-1),w={href:"https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="优缺点-2" tabindex="-1"><a class="header-anchor" href="#优缺点-2" aria-hidden="true">#</a> 优缺点</h3><pre><code>  - 优点
     - 可以拿到父子组件实例，从而拥有实例里的所有属性。
  - 缺点
     - 用这种方法写出来的组件十分难维护，因为你并不知道数据的来源是哪里，有悖于单向数据流的原则
     - \`this.$children\`拿到的是一个数组，你并不能很准确的找到你要找的子组件的位置，尤其是子组件多的时候。
</code></pre><h1 id="html的存储方式" tabindex="-1"><a class="header-anchor" href="#html的存储方式" aria-hidden="true">#</a> html的存储方式</h1><h2 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h2><h3 id="存储方式" tabindex="-1"><a class="header-anchor" href="#存储方式" aria-hidden="true">#</a> 存储方式</h3><p>以键值对(Key-Value)的方式存储，永久存储，永不失效，除非手动删除。</p><h3 id="大小" tabindex="-1"><a class="header-anchor" href="#大小" aria-hidden="true">#</a> 大小</h3><p>每个域名5M</p><h3 id="支持情况" tabindex="-1"><a class="header-anchor" href="#支持情况" aria-hidden="true">#</a> 支持情况</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/711095/1586702956274-458648b6-fd2c-4686-a5c3-30f0dcc36f75.jpeg#align=left&amp;display=inline&amp;height=152&amp;margin=[object Object]&amp;originHeight=152&amp;originWidth=637&amp;size=0&amp;status=done&amp;style=none&amp;width=637" alt="" loading="lazy"> 注意：IE9 localStorage不支持本地文件，需要将项目署到服务器，才可以支持！</p><h2 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h2><p>HTML5 的本地存储 API 中的 localStorage 与 sessionStorage 在使用方法上是相同的，区别在于 sessionStorage 在关闭页面后即被清空，而 localStorage 则会一直保存。</p><h2 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> cookies</h2><p>h5之前，存储主要是用cookies。cookies缺点有在请求头上带着数据，大小是4k之内。主Domain污染。 主要应用：购物车、客户登录 对于IE浏览器有UserData，大小是64k,只有IE浏览器支持。</p><h2 id="web-sql" tabindex="-1"><a class="header-anchor" href="#web-sql" aria-hidden="true">#</a> Web sql</h2><p>关系数据库，通过SQL语句访问 Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs。</p><h2 id="indexdb" tabindex="-1"><a class="header-anchor" href="#indexdb" aria-hidden="true">#</a> IndexDB</h2><p>索引数据库 (IndexedDB) API（作为 HTML5 的一部分）对创建具有丰富本地存储数据的数据密集型的离线 HTML5 Web 应用程序很有用。同时它还有助于本地缓存数据，使传统在线 Web 应用程序（比如移动 Web 应用程序）能够更快地运行和响应。</p><h2 id="application-cache" tabindex="-1"><a class="header-anchor" href="#application-cache" aria-hidden="true">#</a> application cache</h2><p>本地缓存应用所需的文件</p><h2 id="参考网址" tabindex="-1"><a class="header-anchor" href="#参考网址" aria-hidden="true">#</a> 参考网址</h2>`,21),_={href:"https://www.cnblogs.com/LuckyWinty/p/5699117.html",target:"_blank",rel:"noopener noreferrer"},q=e(`<h1 id="promise的方式" tabindex="-1"><a class="header-anchor" href="#promise的方式" aria-hidden="true">#</a> promise的方式？</h1><p>先说是什么，Promise函数是ES6 异步编程的一个方案，它的出现解决了回调地狱的问题。 在执行中，他会同步执行传入的函数，不会执行注册.then() 回调中的函数。同步代码执行完了之后，才会在事件循环中检测是否有可用的promise回调，如果有，则执行，如果没有，进入下一个事件循环。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 我需要 买菜、做饭、给虚空的女朋友送饭、完事了之后打电话给我妈</span>

<span class="token keyword">function</span> <span class="token function">buyVegetables</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;西红柿&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;鸡蛋&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;面条&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我要做番茄鸡蛋面</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;西红柿鸡蛋面&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">transport</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;虚空的女朋友加油！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;妈 ！ 我有女朋友了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> howToGotAGirlFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>buyVegetables<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>cook<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 做饭</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">noodles</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 送给虚空女朋友</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">gangbadei</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),E={href:"https://juejin.im/post/5b31a4b7f265da595725f322#heading-7",target:"_blank",rel:"noopener noreferrer"},S=e('<h1 id="说一下es6" tabindex="-1"><a class="header-anchor" href="#说一下es6" aria-hidden="true">#</a> 说一下ES6</h1><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。 <img src="https://raw.githubusercontent.com/comradeWong/ImageStorageService/master/img/es6核心特性.png" alt="es6" loading="lazy"></p><h2 id="ecmascript-和-javascript-的关系" tabindex="-1"><a class="header-anchor" href="#ecmascript-和-javascript-的关系" aria-hidden="true">#</a> ECMAScript 和 Javascript 的关系</h2><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</p><h2 id="es6-和-ecmascript-2015-的关系" tabindex="-1"><a class="header-anchor" href="#es6-和-ecmascript-2015-的关系" aria-hidden="true">#</a> ES6 和 ECMAScript 2015 的关系</h2><p>ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。</p><h2 id="值得一看的参考资料" tabindex="-1"><a class="header-anchor" href="#值得一看的参考资料" aria-hidden="true">#</a> 值得一看的参考资料</h2>',7),$={href:"https://juejin.im/post/5b037b536fb9a07aa9260b39",target:"_blank",rel:"noopener noreferrer"},A={href:"https://juejin.im/post/5b9cb3336fb9a05d290ee47e",target:"_blank",rel:"noopener noreferrer"},V=e('<h1 id="vue-router-中-hash-和-history-的区别" tabindex="-1"><a class="header-anchor" href="#vue-router-中-hash-和-history-的区别" aria-hidden="true">#</a> Vue router 中 hash 和 history 的区别？</h1><p>vue 是渐进式前端开发框架，为了实现 SPA ，需要引入前端路由系统（vue-router）。 前端路由的核心是：改变视图的同时不会向后端发出请求。 为了达到这一目的，浏览器提供了 hash 和 history 两种模式。 最直观的区别就是在url中<code>hash</code>带了一个很丑的 <code>#</code> ，而<code>history</code>是没有<code>#</code>的。vue<code>默认</code>使用hash。</p><h2 id="hash-mode" tabindex="-1"><a class="header-anchor" href="#hash-mode" aria-hidden="true">#</a> hash mode</h2><p>地址栏 URL 中的 # 符号，比如这个 URL：https://www.shenhuishan.com/#/home, hash的值为 #/home。 它的<code>特点</code>在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全<code>没有影响</code>，因此改变 hash <code>不会</code>重新加载页面。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>hash 模式的原理是 onhashchange 事件，可以在 window 对象上监听这个事件</p><h2 id="history-mode" tabindex="-1"><a class="header-anchor" href="#history-mode" aria-hidden="true">#</a> history mode</h2><p>history 利用了 html5 history interface 中新增的<code>pushState()</code> 和 <code>replaceState()</code> 方法。这两个方法应用于浏览器记录栈，在当前已有的 back、forward、go 基础之上，它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的 URL ，但浏览器不会立即向后端发送请求。</p><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1" aria-hidden="true">#</a> 原理</h3><p>hashchange 只能改变 # 后面的代码片段，history api （pushState、replaceState、go、back、forward） 则给了前端完全的自由，通过在window对象上监听popState()事件。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><blockquote><ol><li>通过<code>history中</code>，丢掉了<code>#</code>，但是：<code>不怕前进，不怕后退，就怕刷新</code>，刷新是实实在在地去<code>请求</code>服务器的。</li></ol></blockquote><blockquote><ol><li>在<code>hash</code>模式下，前端路由修改的是#中的信息，而浏览器请求时<code>不会</code>将 # 后面的数据发送到后台，所以没有问题。但是在history下，你可以自由的修改path，当刷新时，如果服务器中没有相应的响应或者资源，则会刷新出来404页面。</li></ol></blockquote>',13),B={href:"https://www.jianshu.com/p/3fcae6a4968f",target:"_blank",rel:"noopener noreferrer"},T=e(`<h1 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码" aria-hidden="true">#</a> http状态码？</h1><h2 id="http状态码-常见" tabindex="-1"><a class="header-anchor" href="#http状态码-常见" aria-hidden="true">#</a> HTTP状态码（常见）</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。 HTTP状态码的英文为HTTP Status Code。 下面是常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><h2 id="http状态码分类" tabindex="-1"><a class="header-anchor" href="#http状态码分类" aria-hidden="true">#</a> HTTP状态码分类</h2><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型： 1xx：信息，服务器收到请求，需要请求继续执行操作。 2xx：成功，操作被成功接收并处理。 3xx：重定向，需要进一步的操作以完成请求。 4xx：客户端错误，请求包含语法错误或无法完成请求。 5xx：服务器错误，服务器在处理请求的过程中发生了错误。</p><h2 id="http部分状态码" tabindex="-1"><a class="header-anchor" href="#http部分状态码" aria-hidden="true">#</a> HTTP部分状态码</h2><p>100：Continue --- 继续。客户端应继续其请求。 200：OK --- 请求成功。一般用于GET与POST请求。 301：Moved Permanently --- 永久重定向。 302：Found --- 暂时重定向。 400：Bad Request --- 客户端请求的语法错误，服务器无法理解。 403：Forbideen --- 服务器理解请求客户端的请求，但是拒绝执行此请求。 404：Not Found --- 服务器无法根据客户端的请求找到资源（网页）。 500：Internal Server Error --- 服务器内部错误，无法完成请求。 502：Bad Gateway --- 作为网关或者代理服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</p><h1 id="vuex的几种方法" tabindex="-1"><a class="header-anchor" href="#vuex的几种方法" aria-hidden="true">#</a> vuex的几种方法</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>**vuex 的几个核心概念Store：**Vuex 使用一个 Store 对象管理应用的状态，一个 Store 包括 State, Getter, Mutation, Action 四个属性。 <strong>State</strong>：State 意为“状态”，是 vuex 状态管理的数据源。 <strong>Getter</strong>：Getter 的作用与 filters 有一些相似，可以将 State 进行过滤后输出。 <strong>Mutation</strong>：Mutaion 是 vuex 中改变 State 的唯一途径（严格模式下），并且只能是同步操作。Mutaion 使得状态变得可追踪，配合一些 devtools 可以实现 time-travel 的调试体验。 <strong>Action</strong>：一些对 State 的异步操作可以放在 Action 中，并通过在 Action 提交 Mutaion 变更状态。 <strong>Module</strong>：当 Store 对象过于庞大时，可根据具体的业务需求分为多个 Module。</p><h2 id="调用方法" tabindex="-1"><a class="header-anchor" href="#调用方法" aria-hidden="true">#</a> 调用方法</h2><p>vue 项目中 会将Store添加到Vue的原型链中，所以可以使用this.$store来进行调用。</p><table><thead><tr><th>调用</th><th>方法</th><th>语法糖（辅助函数）</th><th>定义位置</th></tr></thead><tbody><tr><td>state</td><td>this.$store.state[模块名].token</td><td>mapState</td><td>computed</td></tr><tr><td>getters</td><td>this.$store.getters. xxx</td><td>mapGetters</td><td>computed</td></tr><tr><td>mutations</td><td>this.$store.commit(&#39;&#39;, value)</td><td>mapMutations</td><td>methods</td></tr><tr><td>actions</td><td>this.$store.dispatch(&#39;&#39;, value)</td><td>mapActions</td><td>methods</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">,</span> mapMutations <span class="token punctuation">,</span> mapActions <span class="token punctuation">,</span> mapGetters  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">counts</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//mapState就等于下面这个</span>
    <span class="token comment">// counts(){</span>
    <span class="token comment">//   return this.$store.state.count</span>
    <span class="token comment">// },</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">getternum</span><span class="token operator">:</span><span class="token string">&#39;doneTodos&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//mapGetters就等于下面的这个</span>
    <span class="token comment">// getternum(){</span>
    <span class="token comment">//   return this.$store.getters.doneTodos</span>
    <span class="token comment">// }</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">addnum</span><span class="token operator">:</span><span class="token string">&#39;addNum&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">addnum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//mapMutations就等于下面的这个</span>
    <span class="token comment">// addnum1(){</span>
    <span class="token comment">//   this.$store.commit(&#39;addNum&#39;)</span>
    <span class="token comment">// },</span>
    
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">actionnum</span><span class="token operator">:</span><span class="token string">&#39;actionNumAdd&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">actionnum6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">actionnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//mapActions就等于下面的这个</span>
    <span class="token comment">//  actionnum6(){</span>
    <span class="token comment">//   this.$store.dispatch(&#39;actionNumAdd&#39;)</span>
    <span class="token comment">// }</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="vue-router的两种路由跳转" tabindex="-1"><a class="header-anchor" href="#vue-router的两种路由跳转" aria-hidden="true">#</a> vue-router的两种路由跳转</h1><h2 id="router-link" tabindex="-1"><a class="header-anchor" href="#router-link" aria-hidden="true">#</a> router-link</h2><h3 id="_1-不带参数" tabindex="-1"><a class="header-anchor" href="#_1-不带参数" aria-hidden="true">#</a> 1.不带参数</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{name:&#39;home&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{path:&#39;/home&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> //name,path都行, 建议用name  
// 注意：router-link中链接如果是&#39;/&#39;开始就是从根路由开始，如果开始不带&#39;/&#39;，则从当前路由开始。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-带参数" tabindex="-1"><a class="header-anchor" href="#_2-带参数" aria-hidden="true">#</a> 2.带参数</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>2.带参数
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{name:&#39;home&#39;, params: {id:1}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
 
// params传参数 (类似post)
// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; 
// 不配置path ,第一次可请求,刷新页面id会消失
// 配置path,刷新页面id会保留
 
// html 取参  $route.params.id
// script 取参  this.$route.params.id
 
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{name:&#39;home&#39;, query: {id:1}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
 
// query传参数 (类似get,url后面会显示参数)
// 路由可不配置
// html 取参  $route.query.id

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="this-router-push-函数里面调用" tabindex="-1"><a class="header-anchor" href="#this-router-push-函数里面调用" aria-hidden="true">#</a> this.$router.push() (函数里面调用)</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token number">1.</span>  不带参数
 
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 
 
 
<span class="token number">2.</span> query传参 
 
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
 
<span class="token comment">// html 取参  $route.query.id</span>
<span class="token comment">// script 取参  this.$route.query.id</span>
 
 
 
<span class="token number">3.</span> params传参
 
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 只能用 name</span>
 
<span class="token comment">// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; ,</span>
<span class="token comment">// 不配置path ,第一次可请求,刷新页面id会消失</span>
<span class="token comment">// 配置path,刷新页面id会保留</span>
 
<span class="token comment">// html 取参  $route.params.id</span>
<span class="token comment">// script 取参  this.$route.params.id</span>
 
 
 
<span class="token number">4.</span> query和params区别
query类似 get<span class="token punctuation">,</span> 跳转之后页面 url后面会拼接参数<span class="token punctuation">,</span>类似<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> 非重要性的可以这样传<span class="token punctuation">,</span> 密码之类还是用params刷新页面id还在
 
params类似 post<span class="token punctuation">,</span> 跳转之后页面 url后面不会拼接参数 <span class="token punctuation">,</span> 但是刷新页面id 会消失
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="this-router-replace-用法同上-push" tabindex="-1"><a class="header-anchor" href="#this-router-replace-用法同上-push" aria-hidden="true">#</a> this.$router.replace() (用法同上,push)</h2><p>同上</p><h2 id="this-router-go-n" tabindex="-1"><a class="header-anchor" href="#this-router-go-n" aria-hidden="true">#</a> this.$router.go(n)</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token comment">// 向前或者向后跳转n个页面，n可为正整数或负整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>push
<span class="token comment">// 跳转到指定url路径，并想history栈中添加一个记录，点击后退会返回到上一个页面</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>replace
<span class="token comment">// 跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token comment">// 向前或者向后跳转n个页面，n可为正整数或负整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="vue生命周期及特点" tabindex="-1"><a class="header-anchor" href="#vue生命周期及特点" aria-hidden="true">#</a> vue生命周期及特点</h1><p>它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。 beforeCreate、created、beforeMounted、mounted、beforeUpdated、updated、beforeDestroy、destroyed. <img src="https://cdn.nlark.com/yuque/0/2020/png/711095/1588598792284-88226e12-cbfb-4e1b-aaf4-5a140b665c7a.png#align=left&amp;display=inline&amp;height=1520&amp;margin=[object Object]&amp;originHeight=3039&amp;originWidth=1200&amp;size=0&amp;status=done&amp;style=shadow&amp;width=600" alt="" loading="lazy"></p><h2 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate" aria-hidden="true">#</a> beforeCreate</h2><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p><h2 id="created" tabindex="-1"><a class="header-anchor" href="#created" aria-hidden="true">#</a> created</h2><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code> property 目前尚不可用。</p><h2 id="beforemount" tabindex="-1"><a class="header-anchor" href="#beforemount" aria-hidden="true">#</a> beforeMount</h2><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h2>`,38),M=n("code",null,"el",-1),P=n("code",null,"vm.$el",-1),O=n("code",null,"mounted",-1),I=n("code",null,"vm.$el",-1),N=n("code",null,"mounted",-1),H=n("strong",null,"不会",-1),L=n("code",null,"mounted",-1),C={href:"https://cn.vuejs.org/v2/api/#vm-nextTick",target:"_blank",rel:"noopener noreferrer"},D=n("strong",null,"该钩子在服务器端渲染期间不被调用。",-1),G=n("h2",{id:"beforeupdate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#beforeupdate","aria-hidden":"true"},"#"),a(" beforeUpdate")],-1),R=n("p",null,[a("数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。 "),n("strong",null,"该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。")],-1),W=n("h2",{id:"updated",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#updated","aria-hidden":"true"},"#"),a(" updated")],-1),F={href:"https://cn.vuejs.org/v2/api/#computed",target:"_blank",rel:"noopener noreferrer"},z={href:"https://cn.vuejs.org/v2/api/#watch",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"updated",-1),J=n("strong",null,"不会",-1),Q=n("code",null,"updated",-1),K={href:"https://cn.vuejs.org/v2/api/#vm-nextTick",target:"_blank",rel:"noopener noreferrer"},Y=n("strong",null,"该钩子在服务器端渲染期间不被调用。",-1),X=e(`<h2 id="activated" tabindex="-1"><a class="header-anchor" href="#activated" aria-hidden="true">#</a> activated</h2><p>被 keep-alive 缓存的组件激活时调用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="deactivated" tabindex="-1"><a class="header-anchor" href="#deactivated" aria-hidden="true">#</a> deactivated</h2><p>被 keep-alive 缓存的组件停用时调用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="beforedestory" tabindex="-1"><a class="header-anchor" href="#beforedestory" aria-hidden="true">#</a> beforeDestory</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="destoryed" tabindex="-1"><a class="header-anchor" href="#destoryed" aria-hidden="true">#</a> destoryed</h2><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。 <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="errorcaptured" tabindex="-1"><a class="header-anchor" href="#errorcaptured" aria-hidden="true">#</a> errorCaptured</h2><p>(err: Error, vm: Component, info: string) =&gt; ?boolean 当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播。</p><h1 id="说一下知道的几种数组原生方法" tabindex="-1"><a class="header-anchor" href="#说一下知道的几种数组原生方法" aria-hidden="true">#</a> 说一下知道的几种数组原生方法</h1><h3 id="arr-push" tabindex="-1"><a class="header-anchor" href="#arr-push" aria-hidden="true">#</a> arr.push()</h3><blockquote><p><strong>从后面添加元素，返回值为添加完后的数组的长度</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-pop" tabindex="-1"><a class="header-anchor" href="#arr-pop" aria-hidden="true">#</a> arr.pop()</h3><blockquote><p><strong>从后面删除元素，只能是一个，返回值是删除的元素</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">//[1,2,3,4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-shift" tabindex="-1"><a class="header-anchor" href="#arr-shift" aria-hidden="true">#</a> <strong>arr.shift()</strong></h3><blockquote><p><strong>从前面删除元素，只能删除一个 返回值是删除的元素</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">// [2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-unshift" tabindex="-1"><a class="header-anchor" href="#arr-unshift" aria-hidden="true">#</a> <strong>arr.unshift()</strong></h3><blockquote><p><strong>从前面添加元素, 返回值是添加完后的数组的长度</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">// [2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-splice-i-n" tabindex="-1"><a class="header-anchor" href="#arr-splice-i-n" aria-hidden="true">#</a> arr.splice(i,n)</h3><blockquote><p><strong>删除从i(索引值)开始之后的那个元素。返回值是删除的元素。</strong> 参数： i 索引值      n 个数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//[3,4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment">// [1,2,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-concat" tabindex="-1"><a class="header-anchor" href="#arr-concat" aria-hidden="true">#</a> arr.concat()</h3><blockquote><p><strong>连接两个数组 返回值为连接后的新数组</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5,1,2]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>   <span class="token comment">// [1,2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="str-split" tabindex="-1"><a class="header-anchor" href="#str-split" aria-hidden="true">#</a> str.split()</h3><blockquote><p><strong>将字符串转化为数组</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">splite</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-sort" tabindex="-1"><a class="header-anchor" href="#arr-sort" aria-hidden="true">#</a> arr.sort()</h3><blockquote><p><strong>将数组进行排序,返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的，见例子。</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// [1, 10, 2, 22, 3, 4, 6]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>   <span class="token comment">// [1, 2, 3, 4, 6, 10, 22]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// [22, 10, 6, 4, 3, 2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-reverse" tabindex="-1"><a class="header-anchor" href="#arr-reverse" aria-hidden="true">#</a> arr.reverse()</h3><blockquote><p><strong>将数组反转,返回值是反转后的数组</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// [5,4,3,2,1]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment">// [5,4,3,2,1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-slice-start-end" tabindex="-1"><a class="header-anchor" href="#arr-slice-start-end" aria-hidden="true">#</a> arr.slice(start, end)</h3><blockquote><p><strong>切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组。</strong><strong>该方法不会影响原数组。</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// [2,3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment">//  [1,2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-foreach-callback" tabindex="-1"><a class="header-anchor" href="#arr-foreach-callback" aria-hidden="true">#</a> arr.forEach(callback)</h3><blockquote><p><strong>遍历数组,无return  即使有return，也不会返回任何值，并且会影响原来的数组。</strong> callback的参数： value --当前索引的值 　　　　　　　　index --索引 　　　　　　　　array --原数组</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    index:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">     array:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>   
    <span class="token comment">//  value:1    index:0     array:1,2,3,4,5</span>
    <span class="token comment">//  value:2    index:1     array:1,2,3,4,5</span>
    <span class="token comment">//  value:3    index:2     array:1,2,3,4,5</span>
    <span class="token comment">//  value:4    index:3     array:1,2,3,4,5</span>
    <span class="token comment">//  value:5    index:4     array:1,2,3,4,5</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        value <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">2</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    index:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">     array:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>   
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token comment">// value:2    index:0     array:1,2,3,4,5</span>
    <span class="token comment">// value:4    index:1     array:1,2,3,4,5</span>
    <span class="token comment">// value:6    index:2     array:1,2,3,4,5</span>
    <span class="token comment">// value:8    index:3     array:1,2,3,4,5</span>
    <span class="token comment">// value:10   index:4     array:1,2,3,4,5</span>
    <span class="token comment">// [1, 2, 3, 4, 5]</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>     
 arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
 <span class="token keyword">return</span> arr 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,4,6,8]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-map-callback" tabindex="-1"><a class="header-anchor" href="#arr-map-callback" aria-hidden="true">#</a> arr.map(callback)</h3><blockquote><p><strong>映射数组(遍历数组),有return 返回一个新数组 。</strong> callback的参数： value --当前索引的值 　　　　　　　　index --索引 　　　　　　　　array --原数组</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        value <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">2</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    index:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">     array:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>   
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> res1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> 
 item <span class="token operator">=</span> item <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> 
 <span class="token keyword">return</span> item<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,6,9,12]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ps: arr.forEach()和arr.map()的区别</strong></p><ol><li>arr.forEach()是和for循环一样，是代替for。arr.map()是修改数组其中的数据，并返回新的数据。</li><li>arr.forEach() 没有return  arr.map() 有return</li></ol><h3 id="arr-filter-callback" tabindex="-1"><a class="header-anchor" href="#arr-filter-callback" aria-hidden="true">#</a> arr.filter(callback)</h3><blockquote><p>**过滤数组，返回一个满足要求的数组 ** callback的参数： value --当前索引的值 　　　　　　　   index --索引</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>    <span class="token comment">// [1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-every-callback" tabindex="-1"><a class="header-anchor" href="#arr-every-callback" aria-hidden="true">#</a> arr.every(callback)</h3><blockquote><p><strong>依据判断条件，数组的元素是否全满足，若满足则返回ture。</strong> callback的参数： value --当前索引的值 　　　　　　　   index --索引</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>value<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>value<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：return fasle 的时候可以跳出遍历。</p><h3 id="arr-some-callback" tabindex="-1"><a class="header-anchor" href="#arr-some-callback" aria-hidden="true">#</a> arr.some(callback)</h3><blockquote><p><strong>依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture。</strong> callback的参数： value --当前索引的值 　　　　　　　   index --索引</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>value<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>value<span class="token operator">&gt;</span><span class="token number">6</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：return true 的时候可以跳出遍历。</p><h3 id="arr-reduce-callback-initialvalue" tabindex="-1"><a class="header-anchor" href="#arr-reduce-callback-initialvalue" aria-hidden="true">#</a> arr.reduce(callback, initialValue)</h3><blockquote><p><strong>迭代数组的所有项，累加器，数组中的每个值（从左到右）合并，最终计算为一个值</strong> 参数： callback: previousValue 必选 --上一次调用回调返回的值，或者是提供的初始值（initialValue） 　　　                currentValue 必选 --数组中当前被处理的数组项 　　　                index 可选 --当前数组项在数组中的索引值 　　　                array 可选 --原数组 　　　initialValue: 可选 --初始值 　　实行方法：回调函数第一次执行时，preValue 和 curValue 可以是一个值，如果 initialValue 在调用 reduce() 时被提供，那么第一个 preValue 等于 initialValue ，并且curValue 等于数组中的第一个值；如果initialValue 未被提供，那么preValue 等于数组中的第一个值.</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span> curValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    preValue <span class="token operator">+</span> curValue
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>    <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-reduceright-callback-initialvalue" tabindex="-1"><a class="header-anchor" href="#arr-reduceright-callback-initialvalue" aria-hidden="true">#</a> arr.reduceRight(callback, initialValue)</h3><blockquote><p><strong>与arr.reduce()功能一样，不同的是，reduceRight()从数组的末尾向前将数组中的数组项做累加。</strong> 　　实行方法：reduceRight()首次调用回调函数callbackfn时，prevValue 和 curValue 可以是两个值之一。如果调用 reduceRight() 时提供了 initialValue 参数，则 prevValue 等于 initialValue，curValue 等于数组中的最后一个值。如果没有提供 initialValue 参数，则 prevValue 等于数组最后一个值， curValue 等于数组中倒数第二个值。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span> curValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
    preValue <span class="token operator">+</span> curValue
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>    <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66),Z={href:"http://www.w3cplus.com/javascript/array-part-8.html",target:"_blank",rel:"noopener noreferrer"},nn=e(`<h3 id="arr-indexof" tabindex="-1"><a class="header-anchor" href="#arr-indexof" aria-hidden="true">#</a> arr.indexOf()</h3><blockquote><p><strong>查找某个元素的索引值，若有重复的，则返回第一个查到的索引值若不存在，则返回 -1。</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// 1</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-lastindexof" tabindex="-1"><a class="header-anchor" href="#arr-lastindexof" aria-hidden="true">#</a> arr.lastIndexOf()</h3><blockquote><p><strong>和arr.indexOf()的功能一样，不同的是从后往前查找</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// 5</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-find-callback" tabindex="-1"><a class="header-anchor" href="#arr-find-callback" aria-hidden="true">#</a> arr.find(callback)</h3><blockquote><p><strong>找到第一个符合条件的数组成员</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>value <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>   <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-findindex-callback" tabindex="-1"><a class="header-anchor" href="#arr-findindex-callback" aria-hidden="true">#</a> arr.findIndex(callback)</h3><blockquote><p><strong>找到第一个符合条件的数组成员的索引值</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-from-es6" tabindex="-1"><a class="header-anchor" href="#array-from-es6" aria-hidden="true">#</a> Array.from() Es6</h3><blockquote><p>**将伪数组变成数组，就是只要有length的就可以转成数组。 **</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;12345&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// [&quot;a&quot;, &quot;b&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-of-es6" tabindex="-1"><a class="header-anchor" href="#array-of-es6" aria-hidden="true">#</a> Array.of() Es6</h3><blockquote><p><strong>将一组值转换成数组，类似于声明数组。</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;11&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// [&#39;11&#39;]</span>

<span class="token comment">// 等价于 </span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [&#39;11]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">ps</span><span class="token operator">:</span>
但是<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>有缺点，就是参数问题引起的重载
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//[empty × 2]  是个空数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// [2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-includes-es6" tabindex="-1"><a class="header-anchor" href="#arr-includes-es6" aria-hidden="true">#</a> arr.includes() Es6</h3><blockquote><p><strong>判断数中是否包含给定的值</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>   <span class="token comment">// ture</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>    <span class="token comment">// false</span>
<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps:与indexOf()的区别： 1 indexOf()返回的是数值，而includes()返回的是布尔值 2 indexOf() 不能判断NaN，返回为-1 ，includes()则可以判断</p><h3 id="arr-keys-es6" tabindex="-1"><a class="header-anchor" href="#arr-keys-es6" aria-hidden="true">#</a> arr.keys() Es6</h3><blockquote><p><strong>遍历数组的键名</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0,1,2,3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-values-es6" tabindex="-1"><a class="header-anchor" href="#arr-values-es6" aria-hidden="true">#</a> arr.values() Es6</h3><blockquote><p><strong>遍历数组键值</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">of</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1,2,3,4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-keys-es6-1" tabindex="-1"><a class="header-anchor" href="#arr-keys-es6-1" aria-hidden="true">#</a> arr.keys() Es6</h3><blockquote><p><strong>遍历数组的键名和键值</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [0,1] [1,2] [2,3] [3,4]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更多方法" tabindex="-1"><a class="header-anchor" href="#更多方法" aria-hidden="true">#</a> 更多方法</h3>`,33),an={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},sn=e('<h1 id="跨域以及跨域的解决方法" tabindex="-1"><a class="header-anchor" href="#跨域以及跨域的解决方法" aria-hidden="true">#</a> 跨域以及跨域的解决方法</h1><ul><li>古老的jsonp技术</li><li>vue中可以设置proxyTable来解决</li><li>axios.defalut.baseUrl 中也可以设置。</li></ul><h1 id="获得对象属性的方法" tabindex="-1"><a class="header-anchor" href="#获得对象属性的方法" aria-hidden="true">#</a> 获得对象属性的方法</h1><ul><li>Object.keys()</li><li>Object.values()</li><li>Object.entries()</li></ul>',4);function tn(en,pn){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[a("$attrs/$listeners可以将父组件的props和事件监听器继承给子元素，在子组件可以调用到父组件的事件和props "),n("a",r,[a("$attrs使用传送门"),t(s)]),n("a",d,[a("$listeners使用传送门"),t(s)])]),k,m,v,n("p",null,[n("a",h,[a("官方传送门"),t(s)])]),b,n("p",null,[n("a",g,[a("官方传送门"),t(s)])]),f,n("p",null,[a("通过"),y,a("或者"),x,a("拿到父或子组件实例。"),n("a",w,[a("官方传送门"),t(s)])]),j,n("p",null,[n("a",_,[a("https://www.cnblogs.com/LuckyWinty/p/5699117.html"),t(s)])]),q,n("p",null,[a("(参考博文："),n("a",E,[a("面试精选之Promise"),t(s)]),a(")")]),S,n("p",null,[n("a",$,[a("ES6核心特性"),t(s)]),n("a",A,[a("ES6、ES7、ES8特性一锅炖(ES6、ES7、ES8学习指南)"),t(s)])]),V,n("p",null,[a("(推荐一篇文章："),n("a",B,[a("https://www.jianshu.com/p/3fcae6a4968f"),t(s)]),a(")")]),T,n("p",null,[a("实例被挂载后调用，这时 "),M,a(" 被新创建的 "),P,a(" 替换了。如果根实例挂载到了一个文档内的元素上，当 "),O,a(" 被调用时 "),I,a(" 也在文档内。 注意 "),N,a(),H,a("保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 "),L,a(" 内部使用 "),n("a",C,[a("vm.$nextTick"),t(s)]),a("。 "),D]),G,R,W,n("p",null,[a("由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用"),n("a",F,[a("计算属性"),t(s)]),a("或 "),n("a",z,[a("watcher"),t(s)]),a(" 取而代之。 注意 "),U,a(),J,a("保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 "),Q,a(" 里使用 "),n("a",K,[a("vm.$nextTick"),t(s)]),a("。 "),Y]),X,n("p",null,[a("ps： (如果对这两个方法不明白，可以查看大漠老师的实例 "),n("a",Z,[a("http://www.w3cplus.com/javascript/array-part-8.html"),t(s)]),a(")")]),nn,n("p",null,[n("a",an,[a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"),t(s)])]),sn])}const cn=p(i,[["render",tn],["__file","mt_interview.html.vue"]]);export{cn as default};
