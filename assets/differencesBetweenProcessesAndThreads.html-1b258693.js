import{_ as e,o as i,c as l,a as c}from"./app-9ed79f46.js";const s={},t=c('<h1 id="进程和线程的区别" tabindex="-1"><a class="header-anchor" href="#进程和线程的区别" aria-hidden="true">#</a> 进程和线程的区别</h1><p>做个简单的比喻：进程=火车，线程=车厢</p><ul><li><p>线程在进程下行进（<em>单纯的车厢无法运行</em>）</p></li><li><p>一个进程可以包含多个线程（<em>一辆火车可以有多个车厢</em>）</p></li><li><p>不同进程间数据很难共享（<em>一辆火车上的乘客很难换到另外一辆火车，比如站点换乘</em>）</p></li><li><p>同一进程下不同线程间数据很易共享（<em>A车厢换到B车厢很容易</em>）</p></li><li><p>进程要比线程消耗更多的计算机资源（<em>采用多列火车相比多个车厢更耗资源</em>）</p></li><li><p>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（<em>一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢</em>）</p></li><li><p>进程可以拓展到多机，进程最多适合多核（<em>不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上</em>）</p></li><li><p>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（<em>比如火车上的洗手间</em>）－&quot;<code>互斥锁</code>&quot;</p></li><li><p>进程使用的内存地址可以限定使用量（<em>比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去</em>）－“<code>信号量</code>”</p></li></ul>',3),o=[t];function m(p,r){return i(),l("div",null,o)}const d=e(s,[["render",m],["__file","differencesBetweenProcessesAndThreads.html.vue"]]);export{d as default};
